package com.beeboxes.face.tools;

import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;


import java.io.OutputStream;


import java.util.Base64;

import sun.misc.BASE64Decoder;
//import sun.misc.BASE64Encoder;

/**
 * 
 *
 */
public class ImgBase64 {
	public static void main(String[] args) {

//		String filePath = "C:/PicPath.csv";
//		
//		ArrayList<String[]> dataArrayList = ReadCSV.readCSVFile(filePath);
//		for(int row = 0 ; row < dataArrayList.size();row++) {
//			//System.out.println(dataArrayList.get(row)[0]);
//			String strImg = getImageStr(dataArrayList.get(row)[0]);
//			writeStringToFile("C:/file1.txt", strImg);
//		}
		String strImg3 = getImageStr("C:/HU7201/a29.jpg");
		//String strImg2=strImg.replaceAll("\n", "");
		//String strImg3=strImg2.replaceAll("\r", "");
		System.out.println(strImg3);
		//String strImg1 = "";
		//generateImage(strImg1, "C:/86619-107.jpg");
	}
	
     /**
	 * @Description: 将base64编码字符串转换为图片,不过需要注意的是，一般插件返回的base64编码的字符串都是有一个
	 * 前缀的。"data:image/jpeg;base64," 解码之前这个得去掉。
	 * @param imgStr base64编码字符串
	 * @param path 图片路径-具体到文件
	*/
	public static boolean generateImage(String imgStr, String path) {
	if (imgStr == null) {
	return false;
	}
	BASE64Decoder decoder = new BASE64Decoder();
	try {
	//解密
	byte[] b = decoder.decodeBuffer(imgStr);
	//处理数据
	for (int i = 0; i < b.length; ++i) {
	if (b[i] < 0) {
	b[i] += 256;
	}
	}

	OutputStream out = new FileOutputStream(path);
	out.write(b);
	out.flush();
	out.close();
	return true;
	} catch (IOException e) {
	e.printStackTrace();
	return false;
	}
	}

	/**
	 * @Description: 根据图片地址转换为base64编码字符串
	 * @Author:
	 * @CreateTime:
	 * @return
	 */
	public static String getImageStr(String imgFile) {
		InputStream inputStream = null;
		byte[] data = null;
		try {
			inputStream = new FileInputStream(imgFile);
			data = new byte[inputStream.available()];
			inputStream.read(data);
			inputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		// 加密
		//BASE64Encoder encoder = new BASE64Encoder();
		//return encoder.encode(data);
		return Base64.getEncoder().encodeToString(data);
		
	}
	
	/**
	 * @Description: 将字符串写到文件中
	 */
	
	public static void writeStringToFile(String filePath,String content) {
		try {
			FileWriter fw = new FileWriter(filePath, true);
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(content+"\r\n");
			bw.close();
			fw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		
	}
	
	


}
